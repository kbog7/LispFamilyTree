;;;; -*- Mode: Common-Lisp -*-

(defstruct person 
  (name nil)
  (parents nil)
  (siblings nil)
  (halfsiblings nil)
  (ancestors nil)
)

(defparameter *familyMap* (make-hash-table))

(defun isParent (name1 name2)
  (find name1 (person-parents name2)))

(defun isSibling (name1 name2)
 (equal? (person-parents name1) (person-parents name2)))

(defun isAncestor (name1 name2)
  (setf list2 (ancestors (name2)))
  (find name1 (list2))
)

(defun ancestors (name) 
 (when (person-parents name)
   (append (person-parents name)
           (ancestors (first (person-parents name)))
           (ancestors (second (person-parents name))))))

(defun isCousins (name1, name2))

(defun isUnRelated (name1, name2)
  (setf firstAnc (ancestors name1))
  (setf secondAnc (ancestors name2)))

(defun family () 
  (let ((line nil)
        (input nil)
        (query nil)
        (firstName nil)
        (secondName nil)
        (thirdName nil))
   (loop 
    (setf line (read-line *standard-input* nil nil))
    (when (null line) (return))
      (setf input (split-sequence " " line))
      (setf query (first input))
      (setf firstName (second input))
      (setf secondName (third input))
      (setf thirdName (fourth input)
     (if (eq query 'E)
      (let ((p1 nil) (p2 nil) (p3 nil))
       (when (null thirdName)
         (setf p1 (gethash firstName *familyMap*))
         (setf p2 (gethash secondName *familyMap*))
         
         (when (null (gethash firstName *familyMap*))
           (setf p1 (make-person :name firstName))
           (setf (gethash firstName *familyMap*) p1))

          (when (null (gethash secondName *familyMap*))
           (setf p2 (make-person :name secondName))
           (setf (gethash secondName *familyMap*) p2))

           (when thirdName
            (setf p3 (make-person :name thirdName))
            (setf (gethash thirdName *familyMap*) p3)
            (setf (person-parents p3) (list firstName secondName)))))
     (if (eq query 'X)
         (cond ((string= secondName "parent")
                (if (isParent firstName secondName)))
               ((string= secondName "sibling")
                (if (isSibling firstName secondName)))
               ((string= secondName "half-sibling"))
               ((string= secondName "ancestor")
                (if (isAncestor firstName secondName)))
               ((string= secondName "cousin"))
               ((string= secondName "unrelated"))))
     (if (eq query 'W)
         (cond ((string= firstName "parent"))
               ((string= firstName "sibling"))
               ((string= firstName "half-sibling"))
               ((string= firstName "ancestor"))
               ((string= firstName "cousin"))
               ((string= firstName "unrelated"))))
     ))) 
