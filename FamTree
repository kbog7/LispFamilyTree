;;;; -*- Mode: Common-Lisp -*-

(defstruct person 
  (name nil)
  (parents nil)
  (ancestors nil)
)

(defparameter *familyMap* (make-hash-table :test #'string=))

(defun isParent (name1 name2)
  (find name1 (person-parents name2) :test #'string=))

(defun isSibling (name1 name2)
 (equal (person-parents name1) (person-parents name2)))

(defun isHalfSibling (name1 name2)
    (setf countNum 0)
    (setf d 0)
    (when (find (first(person-parents name1)) (person-parents name2) :test #'string=)
      (incf countNum))
    (when (find (second(person-parents name1)) (person-parents name2) :test #'string=)
      (incf countNum))
    (when (= countNum 1)
     (incf d)))

(defun ancestors (name) 
 ;;;(when (person-parents name)
   (if (null (person-parents (gethash name *familyMap*)))
        nil
         (when (person-parents (gethash name *familyMap*))       
           (append (person-parents (gethash name *familyMap*))
                   (ancestors (first (person-parents (gethash name *familyMap*))))
                   (ancestors (second (person-parents (gethash name *familyMap*))))))))

(defun isCousin (name1 name2)
  (setf firstAnc (ancestors name1))
  (setf secondAnc (ancestors name2))

  (loop for x in firstAnc
        do (if (find x secondAnc :test #'string=)
            (if (isAncestor name1 name2)
             nil
             (return "No")))
            )
  )

(defun isUnRelated (name1 name2) 
  (setf d 0)
  (setf g 0)
  (if (isCousin name1 name2) 
      (incf d))
  (if (or (isAncestor name1 name2) (isAncestor name2 name1))
      (incf d))
  (if (> d 0)
    (incf g)
    nil)
  )


(defun isAncestor (name1 name2)
  (let ((list2 (ancestors name2)))
    (find name1 list2 :test #'string=))
  )

(defun family ()
  (let ((line nil)
        (input nil)
        (query nil)
        (firstName nil)
        (secondName nil)
        (thirdName nil)
        (everybody nil)
        (relatedTo nil))
   (loop 
    (setf line (read-line *standard-input* nil nil))
    (when (null line) (return))
      (setf input (split-sequence " " line))
      (setf query (first input))
      (setf firstName (second input))
      (setf secondName (third input))
      (setf thirdName (fourth input))
      (let ((p1 nil) (p2 nil) (p3 nil))
        (when (string= query "E")
          (when (null thirdName)
            (setf p1 (gethash firstName *familyMap*))
            (setf p2 (gethash secondName *familyMap*))
            
            (when (null (gethash firstName *familyMap*))
              (setf p1 (make-person :name firstName))
              (setf (gethash firstName *familyMap*) p1))
            
            (when (null (gethash secondName *familyMap*))
              (setf p2 (make-person :name secondName))
              (setf (gethash secondName *familyMap*) p2)))
          
          (when thirdName
            (setf p1 (gethash firstName *familyMap*))
            (setf p2 (gethash secondName *familyMap*))
            
            (when (null (gethash firstName *familyMap*))
              (setf p1 (make-person :name firstName))
              (setf (gethash firstName *familyMap*) p1))
            
            (when (null (gethash secondName *familyMap*))
              (setf p2 (make-person :name secondName))
              (setf (gethash secondName *familyMap*) p2))
            
            (setf p3 (make-person :name thirdName))
            (setf (gethash thirdName *familyMap*) p3)
            (setf (person-parents p3) (list firstName secondName))

            )
          )
        
        (when (string= query "X")
          (print line)
          (maphash #'(lambda (k v)(push k everybody)) *familyMap*)
         ;;;; (if (not (find thirdName in everybody :test #'string=)) 
         ;;;;     (print "No")
              
         (when (string= secondName "parent") 
            (if (isParent firstName (gethash thirdName *familyMap*))
                (print "Yes")
                (print "No")))
          (when (string= secondName "sibling")
            (if (isSibling (gethash firstName *familyMap*) (gethash thirdName *familyMap*))
                (print "Yes")
                (print "No")))
          (when (string= secondName "half-sibling")
            (if (isHalfSibling (gethash firstName *familyMap*) (gethash thirdName *familyMap*))
                (print "Yes")
                (print "No")))
          (when (string= secondName "ancestor")
            (if (isAncestor firstName thirdName)
                (print "Yes")
                (print "No")))
          (when (string= secondName "cousin")
            (if (isCousin firstName thirdName)
                (print "Yes")
                (print "No")))
          (when (string= secondName "unrelated")
            (if (isUnRelated firstName thirdName)
                (print "No")
                (print "Yes"))))
        
        (when (string= query "W")
          (print line)
          (maphash #'(lambda (k v)(push k everybody)) *familyMap*)
          (when (string= firstName "parent")
           (print (sort (person-parents (gethash secondName *familyMap*)) #'string-lessp)))
          (when (string= firstName "sibling")
           (loop for y in everybody
                 do (if (isSibling (gethash y *familyMap*) (gethash secondName *familyMap*))
                       (if (string= y secondName)
                          nil
                         (push y relatedTo)))))
          (when (string= firstName "half-sibling")
           (loop for y in everybody
                 do (if (isHalfSibling (gethash y *familyMap*) (gethash secondName *familyMap*))
                       (if (string= y secondName)
                          nil
                         (push y relatedTo)))))
          (when (string= firstName "ancestor")
           (loop for y in everybody
                 do (if (isAncestor y secondName)
                       (if (string= y secondName)
                          nil
                         (push y relatedTo)))))
          (when (string= firstName "cousin")
           (loop for y in everybody
                 do (if (isCousin y secondName)
                       (if (string= y secondName)
                          nil
                         (push y relatedTo)))))
          (when (string= firstName "unrelated")
           (loop for y in everybody
                 do (if (isUnRelated y secondName)
                       (if (string= y secondName)
                          nil
                         (push y relatedTo)))))
                
    (setf relatedTo (remove-duplicates relatedTo :test #'equal))
    (print (sort relatedTo #'string-lessp)))
        ))))
