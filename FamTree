 ;;;; -*- Mode: Common-Lisp -*-
(defstruct person(name)
  (parents nil)
  (children nil)
  (siblings nil)
  (halfsiblings nil)
  (ancestors nil)
)

(defparameter *family* (make-hash-table)

(defun isParent(name1, name2) )

(defun isSibling(name1, name2) )

(defun isHalfSibling(name1, name2) )

(defun isAncestor(name1, name2) )

(defun addAncestor(name1)
  (if (null (person-parents p))
            (ancestors(first (person-parents p)))
            (ancestors(second (person-parents p))))
 )

(defun isCousin(name1, name2) )

(defun isUnRelated(name1, name2) )


(defun family() 
  (let ((line nil))
   (setf line (read-line *standard-input* nil nil()
   (loop 
    (when (null line) (return))
     (if (eq line first 'E)
       (when (null line fouth)
         ;;; Check if in map, if not add them
         (if (gethash line second *family*)
             
             )
       )
     )

     (if (eq line first 'X) )

     (if (eq line first 'W) )
)
