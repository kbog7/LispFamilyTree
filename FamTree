;;;; -*- Mode: Common-Lisp -*-

(defstruct person 
  (name nil)
  (parents nil)
  (siblings nil)
  (halfsiblings nil)
  (ancestors nil)
)

(defparameter *familyMap* (make-hash-table))

(defun isParent (name1 name2)
  (find name1 (person-parents name2)))

(defun isSibling (name1 name2)
 (equal? (person-parents name1) (person-parents name2)))

(defun isHalfSibling (name1 name2)
 (if (equal? (person-parents name1) (person-parents name2))
    (print "No")
    ((if(string-equal (first (person-parents name1) (first (person-parents name2 ))))
         (print "Yes")
         ((if(string-equal (first (person-parents name1) (second (person-parents name2 )))))
          (print "Yes")
          ((if(string-equal (second (person-parents name1) (first (person-parents name2 )))))
           (print "Yes")
           ((if(string-equal (second (person-parents name1) (second (person-parents name2 )))))
            (print "Yes")
            (print "No"))))))))

(defun isAncestor (name1 name2)
 (addAncestor(name2))
 (find name1 (person-ancestors name2)))

(defun addAncestor (name1)
  (if (null (person-parents name1))
            (addAncestor (first (person-parents name1)))
            (addAncestor (second (person-parents name1)))))

(defun isCousin (name1 name2))
   

(defun isUnRelated(name1 name2))


(defun family () 
  (let ((line nil))
   (setf line (read-line *standard-input* nil nil()))
   (loop 
    (when (null line) (return))
      (split-sequence #\Space line)
      (setf query (first line))
      (setf firstName (second line))
      (setf secondName (third line))
      (setf thirdName (fourth line))
     (if (eq query 'E)
      (let ((p1 nil) (p2 nil) (p3 nil))
       (when (null thirdName)
         (setf p1 (gethash firstName *familyMap*))
         (setf p2 (gethash secondName *familyMap*))
         
         (when (null (gethash firstName *familyMap*))
           (setf p1 (make-person :name firstName))
           (setf (gethash firstName *familyMap*) p1))

          (when (null (gethash secondName *familyMap*))
           (setf p2 (make-person :name secondName))
           (setf (gethash secondName *familyMap*) p2))

          (when name3
            (setf p3 (make-person :name thirdName))
            (setf (gethash thirdName *familyMap*) p3)
            (setf (person-parents p3) (list firstName secondName))))))

     (if (string-equal query 'X))  
     (if (string-equal  query 'W))))) 

