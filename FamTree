;;;; -*- Mode: Common-Lisp -*-
(defstruct person(name)
  (parents nil)
  (siblings nil)
  (halfsiblings nil)
  (ancestors nil)
)

(defparameter *family* (make-hash-table))

(defun isParent(name1, name2) )

(defun isSibling(name1, name2)

)

(defun isHalfSibling(name1, name2) )

(defun isAncestor(name1, name2) )

(defun addAncestor(name1)
  (if (null (person-parents p))
            (ancestors(first (person-parents p)))
            (ancestors(second (person-parents p))))
 )

(defun isCousin(name1, name2) )

(defun isUnRelated(name1, name2) )


(defun family() 
  (let ((line nil))
   (setf line (read-line *standard-input* nil nil()
   (loop 
    (when (null line) (return))
      (setq firstName (line second))
      (setq secondName (line third))
      (setq thirdName (line fourth))
     (if (eq line first 'E)
      (let ((p1 nil) (p2 nil) (p3 nil))
       (when (null thirdName)
         (setf p1 (gethash firstName *family*))
         (setf p2 (gethash secondName *family*))
         
         (when (null (gethash firstName *family))
           (setf p1 (make-person :name firstName))
           (setf (gethash firstName *family*) p1))

          (when (null (gethash secondName *family))
           (setf p2 (make-person :name secondName))
           (setf (gethash secondName *family*) p2))

          (when name3
            (setf p3 (make-person :name thirdName))
            (setf (gethash thirdName *family*) p3)
            (setf (person-parents p3) (list firstName secondName))
          )
     )
   )

     (if (eq line first 'X) )

     (if (eq line first 'W) )
)
